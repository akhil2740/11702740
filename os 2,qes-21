/*Ques. 20. Consider that a system has P resources of same type. These resources are shared by Q processes time to time. 
All processes request and release the resources one at a time.Generate a solution to demonstrate that, 
the system is in safe state when following conditions are satisfied. 
Conditions: 
1.  Maximum resource need of each process is between 1 and P. 
2. Summation of all maximum needs is less than P+Q */

#include<stdio.h>
struct proc
{
int pid;
int wt,tat,at,bt,rbt;
int flag,flag1;
};
struct proc p1[10];
int i,j,k,n,no,m;
float atat=0.0,awt=0.0;
int tbt=0;
int minimum1();
int main()
{
printf("\nenter the number of processes:");
scanf("%d",&n);
printf("\nenter the proc information:");
printf("\npid at bt");
for(i=0;i<n;i++)
{
p1[i].wt=0;
p1[i].tat=0;
p1[i].flag=0;
p1[i].flag1=0;
scanf("%d%d%d",&p1[i].pid,&p1[i].at,&p1[i].bt);
tbt+=p1[i].bt;
p1[i].rbt=p1[i].bt;
}
printf("\nthe proc information:");
printf("\npid at bt");
for(i=0;i<n;i++)
{
printf("\n%d %d %d",p1[i].pid,p1[i].at,p1[i].bt);
}
minv=p1[0].at;
locv=0;
for(i=1;i<n;i++)
{
if(p1[i].at<minv)
{
locv=i; //tells min at process in locv
minv=p1[i].at;
}
}


for(i=0;i<n;i++)
{
if(p1[i].at==minv)
{
p1[i].flag1=1; //processes having same minimum at
}
}
mins=p1[0].bt;
locs=0;
for(i=0;i<n;i++)
{
if(p1[i].flag1==1&&p1[i].bt<mins)
{
mins=p1[i].bt; //gives process with minimum burst time
locs=i;
}
}
printf("\ngantt chart:");
for(i=minv;i<tbt+minv;i++)
{
for(j=0;j<n;j++)
{
if(p1[j].rbt>0&&p1[j].at<=i)
{
p1[j].flag=1;
}
}
no=minimum1();
printf("%d p[%d]",i,p1[no].pid);
p1[no].rbt=p1[no].rbt-1;

for(k=0;k<n;k++)
{
if(p1[k].rbt>0&&p1[k].at<=i&&k!=no)
{
p1[k].wt++;
}
}
}
